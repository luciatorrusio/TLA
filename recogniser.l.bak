
%{
#include<stdio.h>
int rotate = 0;
int load = 0;
int num = 0;
char* arg;
#define ROTATE 0
#define LOAD 1
#define FINISH 2
#define ARGUMENT 3
#define END 4
#define MIRROR 5
#define COLLAGE 6
#define INVERTCOLOR 7
#define ERROR 8
%}
%x	ARG
WORD	[A-Za-z]
DIGIT [0-9]
%%
<INITIAL>rotate[ \t]*[(]  {BEGIN(ARG); return ROTATE; }
<INITIAL>load[ \t]*[(]   {BEGIN(ARG);return LOAD; }
<INITIAL>mirror[ \t]*[(]  {BEGIN(ARG);return MIRROR;}
<INITIAL>collage[ \t]*[(] {BEGIN(ARG);return COLLAGE;}
<INITIAL>invertColor[ \t]*[(]    {BEGIN(ARG);return INVERTCOLOR;}
<ARG>[0-9A-Za-z/\.]+	{arg = yytext; return ARGUMENT;}
<ARG>,			{num++;}
<ARG>[)] {num = 0;BEGIN(INITIAL);}
<INITIAL>;           {return END;}
<INITIAL>.	    ;
<ARG>\n      {return ERROR;}
<ARG>.	;
<INITIAL>return  {return FINISH;}
%%

int yywrap()
{
return 1;
}

int main(int argc, char **argv)
{
    if(argc > 0)
        yyin = fopen(argv[1], "r");
    else
            yyin = stdin;
    int ret = 0;
    ret = yylex();
    while(ret != FINISH && ret !=ERROR) {
        if(ret == ARGUMENT)
            printf("argument %d: %s\n", num, arg);
        if(ret == ROTATE)
            printf("rotate ");
        if(ret == LOAD)
            printf("load ");
        if(ret == MIRROR)
            printf("mirror ");
        if(ret == INVERTCOLOR)
            printf("invertcolor ");
        if(ret == COLLAGE)
            printf("collage ");
	if(ret == ERROR)
            printf("there has been an error ");
        ret = yylex();
    }

    return 0;
}