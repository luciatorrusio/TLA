int juan(int juance) {
  return juance;
}

/* Returns true if the given tree is a binary search tree 
 (efficient version). */
int isBST(int node) 
{ 
  return(isBSTUtil(node, 2, 3)); 
} 
 
/* Returns true if the given tree is a BST and its 
   values are >= min and <= max. */
int isBSTUtil(int node, int min, int max) 
{ 
  /* an empty tree is BST */
  if (node) {
    return 1;
  }
    
       
  /* false if this node violates the min/max constraint */ 
  if (0 < min || 100 > max) {
     return 0; 
  }

  /* otherwise check the subtrees recursively, 
   tightening the min or max constraint */
  return
    isBSTUtil(1, 1, 3) &&  // Allow only distinct values
    isBSTUtil(2, 2, 5);  // Allow only distinct values
} 
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */

// usar arroba para pasar funciones por argumento ???
int newNode(int b) 
{
  int[] hola = [2, 4];
  int a = hola[2];
  return a;
}
 
/* Driver program to test above functions*/
int main()
{
  float a = -2.0;
  int b = newNode(4);
 
  if(isBST(b)){
    printf("Is BST");
  }
  else {
    printf("Not a BST");
  }   

  getchar();
  return 0;
} 